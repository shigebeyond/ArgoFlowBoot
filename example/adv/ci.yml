# argo-workflows/examples/ci.yaml
- flow(ci):
    - args:
        #revision: cfe12d6
        revision: master
    - vc_templates: # 共享的pvc, 所有任务的容器都会挂载
       workdir: # pvc名
         size: 1Gi # 空间大小
         mount: /code # 挂载路径
    - templates:
        build(): # 1 编译golang-example
            in:
              revision:
              '@code':
                 path: /code/ArgoFlowBoot
                 git:
                   #repo: https://github.com/golang/example.git
                   repo: https://gitee.com/shigebeyond/ArgoFlowBoot
                   revision: $revision
            container:
              image: golang:1.8
              command: |
                    cd /code/ArgoFlowBoot/argo-example/hello &&
                    git status &&
                    go build -v .
        run(image): # 2 运行golang-example
            container:
              image: $image
              command: |
                    uname -a ;
                    cat /etc/os-release ;
                    /code/ArgoFlowBoot/argo-example/hello/hello
        main(revision): # 工作流入口必然是main
            steps:
            - - build($revision)
            - - template: run({{item.image}}:{{item.tag}})
                withItems:
                    - { image: 'debian', tag: '9.1' }
                    - { image: 'alpine', tag: '3.6' }

- flow(ci2):
    - set_vars:
        vcode:
          path: /code/ArgoFlowBoot
          git:
            repo: https://gitee.com/shigebeyond/ArgoFlowBoot
            revision: '{{inputs.parameters.revision}}'
    - args:
        revision: cfe12d6
    - vc_templates: # 共享的pvc, 所有任务的容器都会挂载
        workdir: # pvc名
          size: 1Gi # 空间大小
          mount: /code # 挂载路径
    - templates:
        build(revision,@code=$vcode): # 1 编译golang-example
            container:
              image: golang:1.8
              command: |
                    cd /code/ArgoFlowBoot/argo-example/hello &&
                    git status &&
                    go build -v .
        run(image): # 2 运行golang-example
            container:
              image: $image
              command: |
                    uname -a ;
                    cat /etc/os-release ;
                    /code/ArgoFlowBoot/argo-example/hello/hello
        main(revision): # 工作流入口必然是main
            steps:
            - - build($revision)
            - - template: run({{item.image}}:{{item.tag}})
                withItems:
                    - { image: 'debian', tag: '9.1' }
                    - { image: 'alpine', tag: '3.6' }